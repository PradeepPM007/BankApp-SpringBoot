package application.controller;

import application.bll.CustomerManager;
import application.bll.RoleManager;
import application.bll.UserManager;
import application.entity.Customer;
import application.entity.Role;
import application.entity.User;

import org.apache.catalina.mbeans.UserMBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.http.HttpServletRequest;
import javax.swing.undo.UndoManager;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;

/**
 * Created by Vlad on 27-Mar-17.
 */
@Controller
@RequestMapping("/customerOp")
public class AdminController {

    @Autowired
    private CustomerManager customerManager;
    
    @Autowired
    private RoleManager roleManager;
    
    @Autowired
    private UserManager userManager;
 

    @RequestMapping(value = "new", method = RequestMethod.GET)
    public String newClient() {
        return "clientOp/new";
    }

    @RequestMapping(value = "new",method = RequestMethod.POST)
    public String addClient(HttpServletRequest request) {
    	Role role = roleManager.findByRole(request.getParameter("role"));
        
    	User user = (User) customerManager.createNewTransientDomain(User.class.getName());
        user.setUsername(request.getParameter("username"));
        user.setPassword(request.getParameter("password"));
    	user.setRoles(new HashSet<Role>(Arrays.asList(role)));
    	userManager.executeSaveUser(user);
    	
    	Customer customer = (Customer) customerManager.createNewTransientDomain(Customer.class.getName());
    	customer.setName(request.getParameter("name"));
    	customer.setAddress(request.getParameter("address"));
    	customer.setEmail(request.getParameter("email"));
    	customer.setCnp(request.getParameter("CNP"));
    	customer.setUsername(user);
    	customerManager.executeSaveCustomer(customer);
    	
    	    	
        return "redirect:/index";
    }

    @RequestMapping(value = "/{id}/edit",method = RequestMethod.GET)
    public String update(@PathVariable long id, Model model) {
        Client client = clientRepository.findOne(id);
        model.addAttribute("client",client);
        return "clientOp/edit";
    }
    @RequestMapping(value = "update", method = RequestMethod.POST)
    public String updateClient(HttpServletRequest request) {
        Client client = clientRepository.findOne(Long.parseLong(request.getParameter("id")));
        client.setName(request.getParameter("name"));
        client.setAddress(request.getParameter("address"));
        client.setEmail(request.getParameter("email"));
        client.setCnp(request.getParameter("CNP"));
        validator = new ClientValidator();
        if(validator.validate(client))
            clientRepository.save(client);
        else
            return "redirect:/clientOp/new?error=true";
        clientRepository.save(client);

        Log log = new Log();

        log.setOperation("Client updated. ID: " + client.getId() + "; Name: " + client.getName());
        log.setTimestamp(new Timestamp(System.currentTimeMillis()));

        String username = request.getRemoteUser();

        User user = userRepository.findByUsername(username);
        log.setUser(user);
        logRepository.save(log);
        return "redirect:/index";
    }


    @RequestMapping(value = "/view",method = RequestMethod.GET)
    public String view(Model model) {
    	List<Customer> list = customerManager.findAll();
        model.addAttribute("customer", list);
        return "customerOp/view";
    }

    @RequestMapping(value = "/search",method = RequestMethod.GET)
    public String displaySearch(){
        return "clientOp/search";
    }
    @RequestMapping(value = "/search",method = RequestMethod.POST)
    public String search(HttpServletRequest request) {
        Client client = clientRepository.findOne(Long.parseLong(request.getParameter("id")));
        String option = request.getParameter("option");
        if(option.equals("VIEW")) {
            return "redirect:/clientOp/view";
        }
        if(option.equals("EDIT")) {
            return "redirect:/clientOp/" + client.getId() + "/edit";
        }
        return "redirect:/clientOp/search";
    }
}
