package application.controller;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import application.bll.CustomerManager;
import application.bll.PayeeManager;
import application.bll.UserManager;
import application.entity.Account;
import application.entity.Customer;
import application.entity.Payee;
import application.entity.User;

@Controller
@RequestMapping("/customerOp")
public class CustomerController {

	@Autowired
	PayeeManager payeeManager;

	@Autowired
	CustomerManager customerManager;

	@Autowired
	private UserManager userManager;

	@RequestMapping(value = "new", method = RequestMethod.GET)
	public String newPayee() {
		return "customerOp/newCustomer";
	}

	@RequestMapping(value = "/newCustomer",method = RequestMethod.POST)
	public String addPayee(HttpServletRequest request) {
		try {
			User activeUser = userManager.findByUsername(request.getRemoteUser());
			Customer loggedInCustomer =  (Customer) customerManager.findCustomerByUser(activeUser);

			Payee payee = (Payee) payeeManager.createNewTransientDomain(Payee.class.getName());
			payee.setName(request.getParameter("name"));
			payee.setApplicationId(request.getParameter("applicationId"));
			payee.setAccountNo(request.getParameter("accountNo"));

			if(loggedInCustomer != null) {
				payee.setOwner(loggedInCustomer);
			}
		}
		catch (Exception e) {
			return "redirect:/customerOp/new?error=true";
		}
		return "redirect:/index";
	}

	@RequestMapping(value = "/search",method = RequestMethod.GET)
	public String displaySearch(){
		return "customerOp/searchPayee";
	}

	@RequestMapping(value = "/searchPayee",method = RequestMethod.POST)
	public String search(HttpServletRequest request) {

		String applicationId = request.getParameter("applicationId");
		String option = request.getParameter("option");
		if(option.equals("DELETE")) {
			return "redirect:/customerOp/" + applicationId + "/deletePayee";
		}
		if(option.equals("EDIT")) {
			return "redirect:/customerOp/" + applicationId + "/editPayee";
		}
		return "redirect:/customerOp/search";
	}
	
	@RequestMapping(value = "/{applicationId}/editPayee",method = RequestMethod.GET)
    public String update(@PathVariable String applicationId, Model model, HttpServletRequest request) {
        Payee payee = payeeManager.findPayeeByApplicationId(applicationId);
        model.addAttribute("payee",payee);
        return "customerOp/editPayee";
    }
    @RequestMapping(value = "update", method = RequestMethod.POST)
    public String updateClient( HttpServletRequest request) {
    	Payee payee = payeeManager.findPayeeByApplicationId(request.getParameter("applicationId"));
    	payee.setName(request.getParameter("Name"));
    	
    	
    	
    	
    	payeeManager.executeUpdatePayee(payee);
        return "redirect:/index";
    }
    
    @RequestMapping(value = "/{applicationId}/deletePayee",method = RequestMethod.GET)
    public String delete(@PathVariable String applicationId) {
    	payeeManager.executeDeleteByApplicationId(applicationId);
        return "redirect:/index";
    }
    
    @RequestMapping(value = "/viewPayee",method = RequestMethod.GET)
    public String view(HttpServletRequest request, Model model) {
    	User activeUser = userManager.findByUsername(request.getRemoteUser());
    	List<Payee> list = payeeManager.findPayeeByUser(activeUser);
        model.addAttribute("account", list);
        return "customerOp/view";
    }
}
